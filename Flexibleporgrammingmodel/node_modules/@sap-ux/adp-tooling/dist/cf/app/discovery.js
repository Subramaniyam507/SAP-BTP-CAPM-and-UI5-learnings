"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAppHostIds = getAppHostIds;
exports.getCfApps = getCfApps;
const i18n_1 = require("../../i18n");
const api_1 = require("../services/api");
/**
 * Get the app host ids.
 *
 * @param {CfCredentials[]} credentials - The credentials.
 * @returns {string[]} The app host ids.
 */
function getAppHostIds(credentials) {
    const appHostIds = [];
    for (const credential of credentials) {
        const appHostId = credential['html5-apps-repo']?.app_host_id;
        if (appHostId) {
            // There might be multiple appHostIds separated by comma
            const ids = appHostId.split(',').map((item) => item.trim());
            appHostIds.push(...ids);
        }
    }
    return [...new Set(appHostIds)];
}
/**
 * Discover apps from FDC API based on credentials.
 *
 * @param {CfCredentials[]} credentials - The credentials containing app host IDs
 * @param {CfConfig} cfConfig - The CF configuration
 * @param {ToolsLogger} logger - The logger
 * @returns {Promise<CFApp[]>} The discovered apps
 */
async function getCfApps(credentials, cfConfig, logger) {
    const appHostIds = getAppHostIds(credentials);
    logger?.log(`App Host Ids: ${JSON.stringify(appHostIds)}`);
    // Validate appHostIds array length (max 100 as per API specification)
    if (appHostIds.length > 100) {
        throw new Error((0, i18n_1.t)('error.tooManyAppHostIds', { appHostIdsLength: appHostIds.length }));
    }
    return (0, api_1.getFDCApps)(appHostIds, cfConfig, logger);
}
//# sourceMappingURL=discovery.js.map