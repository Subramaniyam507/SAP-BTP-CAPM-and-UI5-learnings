import type AdmZip from 'adm-zip';
import type { ToolsLogger } from '@sap-ux/logger';
import type { Manifest } from '@sap-ux/project-access';
import type { CfCredentials, XsApp } from '../../types';
/**
 * Validate the smart template application.
 *
 * @param {Manifest} manifest - The manifest.
 * @returns {Promise<void>} The messages.
 */
export declare function validateSmartTemplateApplication(manifest: Manifest): Promise<void>;
/**
 * Generic function to extract and parse JSON from zip entries.
 *
 * @param {AdmZip.IZipEntry[]} zipEntries - The zip entries.
 * @param {string} fileName - The file name to find (e.g., 'manifest.json', 'xs-app.json').
 * @param {string} errorKey - The i18n error key for parsing failures.
 * @returns {T | undefined} The parsed JSON object.
 */
export declare function extractJsonFromZip<T>(zipEntries: AdmZip.IZipEntry[], fileName: string, errorKey: string): T | undefined;
/**
 * Extract the xs-app.json from the zip entries.
 *
 * @param {AdmZip.IZipEntry[]} zipEntries - The zip entries.
 * @returns {XsApp | undefined} The xs-app.json.
 */
export declare function extractXSApp(zipEntries: AdmZip.IZipEntry[]): XsApp | undefined;
/**
 * Validate the OData endpoints, data sources and routes.
 *
 * @param {AdmZip.IZipEntry[]} zipEntries - The zip entries.
 * @param {CfCredentials[]} credentials - The credentials.
 * @param {ToolsLogger} logger - The logger.
 * @returns {Promise<string[]>} The messages.
 */
export declare function validateODataEndpoints(zipEntries: AdmZip.IZipEntry[], credentials: CfCredentials[], logger: ToolsLogger): Promise<void>;
//# sourceMappingURL=validation.d.ts.map