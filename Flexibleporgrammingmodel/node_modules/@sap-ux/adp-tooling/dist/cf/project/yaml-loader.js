"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getYamlContent = getYamlContent;
exports.getProjectName = getProjectName;
exports.getProjectNameForXsSecurity = getProjectNameForXsSecurity;
const node_fs_1 = __importDefault(require("node:fs"));
const js_yaml_1 = __importDefault(require("js-yaml"));
/**
 * Parses the MTA file.
 *
 * @param {string} filePath - The file to parse.
 * @returns {MtaYaml} The parsed YAML content.
 */
function getYamlContent(filePath) {
    if (!node_fs_1.default.existsSync(filePath)) {
        throw new Error(`Could not find file ${filePath}`);
    }
    const content = node_fs_1.default.readFileSync(filePath, 'utf-8');
    let parsed;
    try {
        parsed = js_yaml_1.default.load(content);
        return parsed;
    }
    catch (e) {
        throw new Error(`Error parsing file ${filePath}: ${e.message}`);
    }
}
/**
 * Gets the project name from YAML content.
 *
 * @param {MtaYaml} yamlContent - The YAML content.
 * @returns {string | null} The project name or null if not found.
 */
function getProjectName(yamlContent) {
    return yamlContent?.ID || null;
}
/**
 * Gets the project name for XS security from YAML content.
 *
 * @param {MtaYaml} yamlContent - The YAML content.
 * @param {string} timestamp - The timestamp to append.
 * @returns {string | null} The project name for XS security or null if not available.
 */
function getProjectNameForXsSecurity(yamlContent, timestamp) {
    const projectName = getProjectName(yamlContent);
    if (!projectName || !timestamp) {
        return undefined;
    }
    return `${projectName.toLowerCase().replaceAll('.', '_')}_${timestamp}`;
}
//# sourceMappingURL=yaml-loader.js.map