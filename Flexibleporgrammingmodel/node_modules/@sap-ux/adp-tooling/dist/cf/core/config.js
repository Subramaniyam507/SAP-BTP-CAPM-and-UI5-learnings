"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadCfConfig = loadCfConfig;
const node_os_1 = __importDefault(require("node:os"));
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
/**
 * Get the home directory.
 *
 * @returns {string} The home directory.
 */
function getHomedir() {
    let homedir = node_os_1.default.homedir();
    const homeDrive = process.env?.['HOMEDRIVE'];
    const homePath = process.env?.['HOMEPATH'];
    if (process.platform === 'win32' && typeof homeDrive === 'string' && typeof homePath === 'string') {
        homedir = node_path_1.default.join(homeDrive, homePath);
    }
    return homedir;
}
/**
 * Load the CF configuration.
 *
 * @param {ToolsLogger} logger - The logger.
 * @returns {CfConfig} The CF configuration.
 */
function loadCfConfig(logger) {
    let cfHome = process.env['CF_HOME'];
    if (!cfHome) {
        cfHome = node_path_1.default.join(getHomedir(), '.cf');
    }
    const configFileLocation = node_path_1.default.join(cfHome, 'config.json');
    let config = {};
    try {
        const configAsString = node_fs_1.default.readFileSync(configFileLocation, 'utf-8');
        config = JSON.parse(configAsString);
    }
    catch (e) {
        logger?.error('Cannot receive token from config.json');
    }
    const result = {};
    if (config) {
        if (config.Target) {
            const apiCfIndex = config.Target.indexOf('api.cf.');
            result.url = config.Target.substring(apiCfIndex + 'api.cf.'.length);
        }
        if (config.AccessToken) {
            result.token = config.AccessToken.substring('bearer '.length);
        }
        if (config.OrganizationFields) {
            result.org = {
                Name: config.OrganizationFields.Name,
                GUID: config.OrganizationFields.GUID
            };
        }
        if (config.SpaceFields) {
            result.space = {
                Name: config.SpaceFields.Name,
                GUID: config.SpaceFields.GUID
            };
        }
    }
    return result;
}
//# sourceMappingURL=config.js.map