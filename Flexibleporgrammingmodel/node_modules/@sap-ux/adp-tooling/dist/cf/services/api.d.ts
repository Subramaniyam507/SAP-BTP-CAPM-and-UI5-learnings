import type { ToolsLogger } from '@sap-ux/logger';
import type { CfConfig, CFApp, RequestArguments, ServiceKeys, GetServiceInstanceParams, MtaYaml } from '../../types';
/**
 * Get the business service keys.
 *
 * @param {string} businessService - The business service.
 * @param {CfConfig} config - The CF config.
 * @param {ToolsLogger} logger - The logger.
 * @returns {Promise<ServiceKeys | null>} The service keys.
 */
export declare function getBusinessServiceKeys(businessService: string, config: CfConfig, logger: ToolsLogger): Promise<ServiceKeys | null>;
/**
 * Get the FDC request arguments.
 *
 * @param {CfConfig} cfConfig - The CF config.
 * @returns {RequestArguments} The request arguments.
 */
export declare function getFDCRequestArguments(cfConfig: CfConfig): RequestArguments;
/**
 * Get the FDC apps.
 *
 * @param {string[]} appHostIds - The app host ids.
 * @param {CfConfig} cfConfig - The CF config.
 * @param {ToolsLogger} logger - The logger.
 * @returns {Promise<FDCResponse>} The FDC apps.
 */
export declare function getFDCApps(appHostIds: string[], cfConfig: CfConfig, logger: ToolsLogger): Promise<CFApp[]>;
/**
 * Creates a service.
 *
 * @param {string} spaceGuid - The space GUID.
 * @param {string} plan - The plan.
 * @param {string} serviceInstanceName - The service instance name.
 * @param {string[]} tags - The tags.
 * @param {string} [serviceName] - The service name.
 * @param {object} [security] - Security configuration.
 * @param {string | null} security.filePath - The security file path.
 * @param {string} [security.xsappname] - The XS app name.
 * @param {string} [templatePathOverwrite] - The template path overwrite.
 * @param {ToolsLogger} [logger] - The logger.
 */
export declare function createService(spaceGuid: string, plan: string, serviceInstanceName: string, tags: string[], serviceName: string | undefined, security?: {
    filePath: string | null;
    xsappname?: string;
}, templatePathOverwrite?: string, logger?: ToolsLogger): Promise<void>;
/**
 * Creates the services.
 *
 * @param {string} projectPath - The project path.
 * @param {MtaYaml} yamlContent - The YAML content.
 * @param {string[]} initialServices - The initial services.
 * @param {string} timestamp - The timestamp.
 * @param {string} spaceGuid - The space GUID.
 * @param {string} [templatePathOverwrite] - The template path overwrite.
 * @param {ToolsLogger} logger - The logger.
 * @returns {Promise<void>} The promise.
 */
export declare function createServices(projectPath: string, yamlContent: MtaYaml, initialServices: string[], timestamp: string, spaceGuid: string, templatePathOverwrite?: string, logger?: ToolsLogger): Promise<void>;
/**
 * Gets the service instance keys.
 *
 * @param {GetServiceInstanceParams} serviceInstanceQuery - The service instance query.
 * @param {ToolsLogger} logger - The logger.
 * @returns {Promise<ServiceKeys | null>} The service instance keys.
 */
export declare function getServiceInstanceKeys(serviceInstanceQuery: GetServiceInstanceParams, logger: ToolsLogger): Promise<ServiceKeys | null>;
//# sourceMappingURL=api.d.ts.map