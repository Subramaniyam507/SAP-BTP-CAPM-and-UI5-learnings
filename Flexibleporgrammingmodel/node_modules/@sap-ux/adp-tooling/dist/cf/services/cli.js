"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCfInstalled = isCfInstalled;
exports.getServiceKeys = getServiceKeys;
exports.createServiceKey = createServiceKey;
exports.requestCfApi = requestCfApi;
const CFLocal = require("@sap/cf-tools/out/src/cf-local");
const CFToolsCli = require("@sap/cf-tools/out/src/cli");
const types_1 = require("@sap/cf-tools/out/src/types");
const i18n_1 = require("../../i18n");
const ENV = { env: { 'CF_COLOR': 'false' } };
/**
 * Checks if Cloud Foundry is installed.
 *
 * @param {ToolsLogger} logger - The logger.
 * @returns {Promise<boolean>} True if CF is installed, false otherwise.
 */
async function isCfInstalled(logger) {
    try {
        const response = await CFToolsCli.Cli.execute(['version'], ENV);
        if (response.exitCode !== 0) {
            throw new Error(response.stderr);
        }
        return true;
    }
    catch (e) {
        logger.error((0, i18n_1.t)('error.cfNotInstalled', { error: e.message }));
        return false;
    }
}
/**
 * Gets the service instance credentials.
 *
 * @param {string} serviceInstanceGuid - The service instance GUID.
 * @returns {Promise<CfCredentials[]>} The service instance credentials.
 */
async function getServiceKeys(serviceInstanceGuid) {
    try {
        return await CFLocal.cfGetInstanceCredentials({
            filters: [
                {
                    value: serviceInstanceGuid,
                    // key: eFilters.service_instance_guid
                    key: types_1.eFilters.service_instance_guid
                }
            ]
        });
    }
    catch (e) {
        throw new Error((0, i18n_1.t)('error.cfGetInstanceCredentialsFailed', { serviceInstanceGuid, error: e.message }));
    }
}
/**
 * Creates a service key.
 *
 * @param {string} serviceInstanceName - The service instance name.
 * @param {string} serviceKeyName - The service key name.
 */
async function createServiceKey(serviceInstanceName, serviceKeyName) {
    try {
        const cliResult = await CFToolsCli.Cli.execute(['create-service-key', serviceInstanceName, serviceKeyName], ENV);
        if (cliResult.exitCode !== 0) {
            throw new Error(cliResult.stderr);
        }
    }
    catch (e) {
        throw new Error((0, i18n_1.t)('error.createServiceKeyFailed', { serviceInstanceName, error: e.message }));
    }
}
/**
 * Request CF API.
 *
 * @param {string} url - The URL.
 * @returns {Promise<T>} The response.
 */
async function requestCfApi(url) {
    try {
        const response = await CFToolsCli.Cli.execute(['curl', url], ENV);
        if (response.exitCode === 0) {
            try {
                return JSON.parse(response.stdout);
            }
            catch (e) {
                throw new Error((0, i18n_1.t)('error.failedToParseCFAPIResponse', { error: e.message }));
            }
        }
        throw new Error(response.stderr);
    }
    catch (e) {
        throw new Error((0, i18n_1.t)('error.failedToRequestCFAPI', { error: e.message }));
    }
}
//# sourceMappingURL=cli.js.map