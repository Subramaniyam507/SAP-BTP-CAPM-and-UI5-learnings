"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCf = generateCf;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const cf_1 = require("../cf");
const source_1 = require("../source");
const manifest_1 = require("./manifest");
const project_utils_1 = require("./project-utils");
const i18n_1 = require("./i18n");
/**
 * Writes the CF adp-project template to the mem-fs-editor instance.
 *
 * @param {string} basePath - The base path.
 * @param {CfAdpWriterConfig} config - The CF writer configuration.
 * @param {ToolsLogger} logger - The logger.
 * @param {Editor} fs - The memfs editor instance.
 * @returns {Promise<Editor>} The updated memfs editor instance.
 */
async function generateCf(basePath, config, logger, fs) {
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    const fullConfig = setDefaults(config);
    const { app, cf, ui5 } = fullConfig;
    await (0, cf_1.adjustMtaYaml)({
        projectPath: basePath,
        moduleName: app.id,
        appRouterType: cf.approuter,
        businessSolutionName: cf.businessSolutionName ?? '',
        businessService: cf.businessService,
        spaceGuid: cf.space.GUID
    }, fs, config.options?.templatePathOverwrite, logger);
    if (fullConfig.app.i18nModels) {
        (0, i18n_1.writeI18nModels)(basePath, fullConfig.app.i18nModels, fs);
    }
    const variant = (0, project_utils_1.getCfVariant)(fullConfig);
    (0, manifest_1.fillDescriptorContent)(variant.content, app.appType, ui5.version, app.i18nModels);
    await (0, project_utils_1.writeCfTemplates)(basePath, variant, fullConfig, fs);
    return fs;
}
/**
 * Set default values for CF configuration.
 *
 * @param {CfAdpWriterConfig} config - The CF configuration provided by the calling middleware.
 * @returns {CfAdpWriterConfig} The enhanced configuration with default values.
 */
function setDefaults(config) {
    const configWithDefaults = {
        ...config,
        app: {
            ...config.app,
            appType: config.app.appType ?? (0, source_1.getApplicationType)(config.app.manifest),
            i18nModels: config.app.i18nModels ?? (0, i18n_1.getI18nModels)(config.app.manifest, config.app.layer, config.app.id),
            i18nDescription: config.app.i18nDescription ?? (0, i18n_1.getI18nDescription)(config.app.layer, config.app.title)
        },
        options: {
            addStandaloneApprouter: false,
            addSecurity: false,
            ...config.options
        }
    };
    return configWithDefaults;
}
//# sourceMappingURL=cf.js.map