"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ABAPVirtualHostProvider = void 0;
const logger_1 = require("@sap-ux/logger");
const axios_1 = __importDefault(require("axios"));
/**
 * Makes requests to determine the virtual host names for UI and API access.
 */
class ABAPVirtualHostProvider {
    apiURL;
    uiURL;
    systemURL;
    relatedUrls;
    logger = new logger_1.ToolsLogger();
    /**
     *
     * @param backendUrl backend Url
     * @param logger
     */
    constructor(backendUrl, logger) {
        this.systemURL = new URL(backendUrl);
        if (logger) {
            this.logger = logger;
        }
    }
    /**
     * Retrieves the virtual host names for UI and API access from the ABAP system public endpoint at the backend host.
     *
     * @returns An object containing the related URLs for API and UI access.
     */
    async getVirtualHosts() {
        if (!this.relatedUrls) {
            this.logger.debug(`Requesting virtual hosts from: ${this.systemURL}`);
            const url = new URL('/sap/public/bc/icf/virtualhost', this.systemURL.origin);
            const response = await axios_1.default.get(url.href, {
                headers: {
                    Accept: 'application/json'
                }
            });
            if (response.status !== 200) {
                this.logger.debug(`Failed to fetch virtual hosts: from: ${url}. Error: ${response.statusText}`);
                throw new Error(`Failed to fetch virtual hosts: ${response.statusText}`);
            }
            this.relatedUrls = response.data;
        }
        return this.relatedUrls;
    }
    /**
     * Get the UI hostname, if not cached yet it will be fetched.
     *
     * @returns UI hostname
     */
    async uiHostname() {
        if (!this.uiURL) {
            this.uiURL = new URL((await this.getVirtualHosts()).relatedUrls.UI);
        }
        return this.uiURL.origin;
    }
    /**
     * Get the API hostname, if not cached yet it will be fetched.
     *
     * @returns API hostname
     */
    async apiHostname() {
        if (!this.apiURL) {
            this.apiURL = new URL((await this.getVirtualHosts()).relatedUrls.API);
        }
        return this.apiURL.origin;
    }
    /**
     * Get the logoff URL.
     *
     * @returns logoff URL
     */
    async logoffUrl() {
        return (await this.uiHostname()) + '/sap/public/bc/icf/logoff';
    }
}
exports.ABAPVirtualHostProvider = ABAPVirtualHostProvider;
//# sourceMappingURL=abap-virtual-host-provider.js.map